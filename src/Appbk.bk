import React, {useState, useEffect} from 'react';
import './App.css';
/**
 * 
 * POSTS APP
 */
export default function App(){
  const [posts, setPosts] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null) //we use null to store the error code value

  const fetchPosts = async (signal) => {
    setLoading(true)
    setError(null)
      try{
        const response = await fetch('https://jsonplaceholder.typicode.com/posts/', {signal})
        if (!response.ok) {
          throw new Error(`HTTP Response with ${response.status}`)
        }
        const data = await response.json()
        setPosts(data)
      } catch (e){
        if (e.name == 'AbortError') {
          console.log('Fetch Cancelled')
        } else{
          setError(e.message)
          setPosts([])
        }
      } finally{
        setLoading(false) // setting the loading phase to false regardless of the promise result
      }
    }

  useEffect(() => {
    const controller = new AbortController()
    setTimeout(() => fetchPosts(controller.signal), 1500)

    return () => controller.abort()

  }, [])

  if(loading) {
    return (
      <div><h1>Loading cik...</h1></div>
    )
  }

  if(error) {
    return (
      <div><h1>Error cik, kodenya {error}</h1></div>
    )
  }

  return(
    <div className="App">
      <h1>Daftar Posts</h1>
      <button onClick={() => fetchPosts()} className='bg-black px-2 py-4'>Refresh</button>
      <div className="user-list">
        {posts.map(post => (
          <div key={post.id} className="user-card">
            <h2>{post.userId}</h2>
            <p><strong>Title:</strong> {post.title}</p>
            <p><strong>Content:</strong> {post.body}</p>
          </div>
        ))}
      </div>
    </div>
  )
}

//TODO: 
//Render to ui
//intentionally make the fetch error by changing the api
// create a button that reloads data
//create a feature where if the user clicks any individual post it shows more details (could use a button to interact or cliks the card instead) 